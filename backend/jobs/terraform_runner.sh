#!/bin/bash
"""
Terraform Execution Script - Infrastructure provisioning
======================================================

Handles Terraform lifecycle operations for infrastructure provisioning.
"""

set -euo pipefail  # Exit on error, undefined vars, pipe failures

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TERRAFORM_DIR="${TERRAFORM_DIR:-../terraform}"
WORKSPACE_DIR="${WORKSPACE_DIR:-/tmp/terraform-workspaces}"
JOB_ID="${JOB_ID:-unknown}"
ACTION="${ACTION:-apply}"
RESOURCE_TYPE="${RESOURCE_TYPE:-ec2}"

# Logging function
log() {
    local level="$1"
    shift
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] [JOB:$JOB_ID] $*" | tee -a "${WORKSPACE_DIR}/${JOB_ID}/terraform.log"
}

# Error handler
error_exit() {
    log "ERROR" "$1"
    exit 1
}

# Validate environment
validate_environment() {
    log "INFO" "Validating environment for job $JOB_ID"
    
    # Check required tools
    command -v terraform >/dev/null 2>&1 || error_exit "Terraform not found in PATH"
    command -v aws >/dev/null 2>&1 || error_exit "AWS CLI not found in PATH"
    
    # Check AWS credentials
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        error_exit "AWS credentials not configured or invalid"
    fi
    
    # Check required environment variables
    [[ -n "${AWS_REGION:-}" ]] || error_exit "AWS_REGION not set"
    [[ -n "${RESOURCE_NAME:-}" ]] || error_exit "RESOURCE_NAME not set"
    
    log "INFO" "Environment validation completed"
}

# Setup workspace
setup_workspace() {
    local job_workspace="$WORKSPACE_DIR/$JOB_ID"
    local template_dir="$TERRAFORM_DIR/templates/$RESOURCE_TYPE"
    
    log "INFO" "Setting up workspace: $job_workspace"
    
    # Create workspace directory
    mkdir -p "$job_workspace"
    cd "$job_workspace"
    
    # Copy Terraform templates
    if [[ -d "$template_dir" ]]; then
        cp -r "$template_dir"/* .
        log "INFO" "Copied templates from $template_dir"
    else
        error_exit "Template directory not found: $template_dir"
    fi
    
    # Generate terraform.tfvars
    generate_tfvars
    
    log "INFO" "Workspace setup completed"
}

# Generate terraform.tfvars file
generate_tfvars() {
    log "INFO" "Generating terraform.tfvars"
    
    cat > terraform.tfvars <<EOF
# Generated by Internal Platform - Job: $JOB_ID
resource_name = "${RESOURCE_NAME}"
environment   = "${ENVIRONMENT:-dev}"
region        = "${AWS_REGION}"

# Resource-specific configuration
$(if [[ -n "${INSTANCE_TYPE:-}" ]]; then echo "instance_type = \"$INSTANCE_TYPE\""; fi)
$(if [[ -n "${KEY_PAIR_NAME:-}" ]]; then echo "key_pair_name = \"$KEY_PAIR_NAME\""; fi)
$(if [[ -n "${BUCKET_VERSIONING:-}" ]]; then echo "versioning_enabled = $BUCKET_VERSIONING"; fi)

# Tags
tags = {
  ManagedBy     = "internal-platform"
  JobId         = "$JOB_ID"
  Environment   = "${ENVIRONMENT:-dev}"
  CreatedBy     = "${USER:-automation}"
  ResourceType  = "$RESOURCE_TYPE"
$(if [[ -n "${PROJECT_NAME:-}" ]]; then echo "  Project = \"$PROJECT_NAME\""; fi)
}
EOF
    
    log "INFO" "terraform.tfvars generated"
}

# Initialize Terraform
terraform_init() {
    log "INFO" "Initializing Terraform"
    
    if ! terraform init -no-color 2>&1 | tee -a terraform.log; then
        error_exit "Terraform init failed"
    fi
    
    log "INFO" "Terraform initialization completed"
}

# Plan Terraform changes
terraform_plan() {
    log "INFO" "Planning Terraform changes"
    
    local plan_args=""
    if [[ "$ACTION" == "destroy" ]]; then
        plan_args="-destroy"
    fi
    
    if ! terraform plan $plan_args -out=tfplan -no-color 2>&1 | tee -a terraform.log; then
        error_exit "Terraform plan failed"
    fi
    
    log "INFO" "Terraform plan completed"
}

# Apply Terraform changes
terraform_apply() {
    log "INFO" "Applying Terraform changes"
    
    if ! terraform apply -auto-approve tfplan -no-color 2>&1 | tee -a terraform.log; then
        error_exit "Terraform apply failed"
    fi
    
    log "INFO" "Terraform apply completed"
}

# Get Terraform outputs
terraform_outputs() {
    log "INFO" "Retrieving Terraform outputs"
    
    if terraform output -json > outputs.json 2>/dev/null; then
        log "INFO" "Terraform outputs saved to outputs.json"
    else
        log "WARNING" "No Terraform outputs available"
        echo '{}' > outputs.json
    fi
}

# Cleanup workspace (optional)
cleanup_workspace() {
    if [[ "${CLEANUP_WORKSPACE:-false}" == "true" ]]; then
        log "INFO" "Cleaning up workspace"
        cd /
        rm -rf "$WORKSPACE_DIR/$JOB_ID"
        log "INFO" "Workspace cleanup completed"
    fi
}

# Main execution
main() {
    log "INFO" "Starting Terraform execution for job $JOB_ID"
    log "INFO" "Action: $ACTION, Resource Type: $RESOURCE_TYPE"
    
    # Execution steps
    validate_environment
    setup_workspace
    terraform_init
    terraform_plan
    terraform_apply
    terraform_outputs
    
    log "INFO" "Terraform execution completed successfully"
    
    # Optional cleanup
    cleanup_workspace
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
